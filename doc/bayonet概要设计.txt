IAction的几个参数啊，需要传入appactor和socketactor，没办法要用啊
=============================================================================
socketactor和appactor的交互
一.passive角度
    1.handeDecodeRecv,这里要求生成一个actor对象，并路由到需要的状态
    2.被动close，将appactor的状态切换成FINI
    3.sendover，同上

二.appactor角度
    1.如果正常结束，要求业务最后一个状态是进入RSP状态，等待passive的sendover或者close或者error（反正会进入fini）
    2.如果不正常结束，即不打算回报，那么就直接进入FINI状态，就会直接结束了

三.active角度
    1.在appfsm的process中，在actioninfoset来设置上appactor的指针
    2.在出错，关闭，recv完成，timeout等等情况下，都要通知appactor
    3.appfsm退出的时候，对每个actioninfo使其（1）appactor指针为空，（2）调用changestate 到 closeing，（3）erase掉
=============================================================================
1.之前想过的，表是满足不了状态转化的需求的，所以，用树即可。真是天才。
<!--=============================================================================-->
1.难道我理解错了？appactor和socketactor之间不是HSM，而是观察者与被观察者？，socketActor的完成是触发appactor的一个event而已
2.另外，actor可以有一个函数传入event，但是这个就是两种实现而已，一个是在上下文中判断，一个是在process中判断
<!--=============================================================================-->
1.udp的server怎么用epoll呢，就是像ptlogin一样，一个socket recv，然后在recv完成之后，记住ip和port，新建一个socket，加入到send监听中，并发送数据给他。
<!--=============================================================================-->
fsm之所以不保存frame指针的原因就在于，fsm是无状态的，要不是因为C语言中没法传类名，就不会使用fsm的对象了
<!--=============================================================================-->
一.accept之后，是要进入第一个状态的，怎么进入呢？
1.如果不用action
两层状态机，一定是先出现上层。那么这个时候，一定要进入一个状态初始状态，要想进入一个状态，就必须的先有一个actor。

初始化的状态，就是要把那个accept的socket呀，注册上.
然后socket转化成onrecive状态.

<!--=============================================================================-->
accept()
actor=new SocketActor()
changestate(waitrecv)

在socketActor的action中，直接调用
appactor=new AppActor()
appactor.setgloblsocket()

所以业务要做的倒是很简单了

1.注册一个用来accept之后socket回调工厂函数，用来生成一个socketActor
2.实现所有的state和对应的action

调用方式
regFuncOnAccept(socketid),changestate

regAppState(int,Fsm);

=============================================================================
一.accept之后，是要进入第一个状态的，怎么进入呢？
1.如果不用action
两层状态机，一定是先出现上层。那么这个时候，一定要进入一个状态初始状态，要想进入一个状态，就必须的先有一个actor。

初始化的状态，就是要把那个accept的socket呀，注册上.
然后socket转化成onrecive状态.

socketactor中的fini不要delete this，让外层循环去做，里面只是把数据都释放掉。包括socket的close

<!--=============================================================================-->
accept()
actor=new SocketActor()
changestate(waitrecv)

在socketActor的action中，直接调用
appactor=new AppActor()
appactor.setgloblsocket()

所以业务要做的倒是很简单了

1.注册一个用来accept之后socket回调工厂函数，用来生成一个socketActor
2.实现所有的state和对应的action

调用方式
regFuncOnAccept(socketid),changestate

regAppState(int,Fsm);
